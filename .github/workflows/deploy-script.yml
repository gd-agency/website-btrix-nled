name: Deploy Project Conditionally

on:
  push:
    branches:
      - main # Или ваша ветка для деплоя

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY_PRIVATE }}

      - name: Determine Deployment Method
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.VPS_HOST }} "if [ ! -d '${{ secrets.DEPLOY_PATH }}' ]; then echo 'DIR_NOT_EXIST'; else echo 'DIR_EXIST'; fi" > deployment_method.txt

      - name: Copy Project to Server (Full Copy)
        if: contains(steps.determine-deployment-method.outputs.result, 'DIR_NOT_EXIST')
        run: |
          tar -czf project.tar.gz .
          scp -o StrictHostKeyChecking=no project.tar.gz ${{ secrets.USERNAME }}@${{ secrets.VPS_HOST }}:/tmp
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.VPS_HOST }} << EOF
            mkdir -p ${{ secrets.DEPLOY_PATH }}
            tar -xzf /tmp/project.tar.gz -C ${{ secrets.DEPLOY_PATH }}
            rm /tmp/project.tar.gz
          EOF
        shell: bash

      - name: Sync Project to Server (rsync)
        if: contains(steps.determine-deployment-method.outputs.result, 'DIR_EXIST')
        run: |
          rsync -avz --exclude='.git/' ${{ github.workspace }}/ ${{ secrets.USERNAME }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}

      - name: Restart Project
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.VPS_HOST }} << EOF
            cd ${{ secrets.DEFAULT_PATH }}/${{ secrets.PROJECT_PATH }}
            echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" > .env
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "OUTPUT_PORT=${{ secrets.OUTPUT_PORT }}" >> .env
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d
          EOF
