{"version":3,"file":"parser.bundle.js","sources":["../src/parser-scheme.js","../src/parser.js"],"sourcesContent":["import { BBCodeScheme, BBCodeTagScheme } from 'ui.bbcode.model';\n\nexport class ParserScheme extends BBCodeScheme\n{\n\tgetTagScheme(tagName: string): BBCodeTagScheme\n\t{\n\t\treturn new BBCodeTagScheme({\n\t\t\tname: 'any',\n\t\t});\n\t}\n\n\tisAllowedTag(tagName: string): boolean\n\t{\n\t\treturn true;\n\t}\n}\n","import { Type } from 'main.core';\nimport {\n\tBBCodeScheme,\n\tDefaultBBCodeScheme,\n\tBBCodeNode,\n\ttypeof BBCodeRootNode,\n\ttypeof BBCodeElementNode,\n\ttypeof BBCodeTextNode,\n\ttypeof BBCodeTagScheme,\n\ttype BBCodeContentNode,\n\ttype BBCodeSpecialCharNode,\n} from 'ui.bbcode.model';\nimport { ParserScheme } from './parser-scheme';\n\nconst TAG_REGEX: RegExp = /\\[(\\/)?(\\w+|\\*)([\\s\\w\"'./:=]+)?]/gs;\nconst isSpecialChar = (symbol: string): boolean => {\n\treturn ['\\n', '\\t'].includes(symbol);\n};\n\nconst isList = (tagName: string): boolean => {\n\treturn ['list', 'ul', 'ol'].includes(tagName);\n};\n\nconst isListItem = (tagName: string): boolean => {\n\treturn ['*', 'li'].includes(tagName);\n};\n\nconst parserScheme = new ParserScheme();\n\ntype BBCodeParserOptions = {\n\tscheme?: BBCodeScheme,\n\tonUnknown?: (node: BBCodeContentNode, scheme: BBCodeScheme) => void,\n};\n\nclass BBCodeParser\n{\n\tscheme: BBCodeScheme;\n\tonUnknownHandler: () => any;\n\n\tconstructor(options: BBCodeParserOptions = {})\n\t{\n\t\tif (options.scheme)\n\t\t{\n\t\t\tthis.setScheme(options.scheme);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setScheme(new DefaultBBCodeScheme());\n\t\t}\n\n\t\tif (Type.isFunction(options.onUnknown))\n\t\t{\n\t\t\tthis.setOnUnknown(options.onUnknown);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setOnUnknown(BBCodeParser.defaultOnUnknownHandler);\n\t\t}\n\t}\n\n\tsetScheme(scheme: BBCodeScheme)\n\t{\n\t\tthis.scheme = scheme;\n\t}\n\n\tgetScheme(): BBCodeScheme\n\t{\n\t\treturn this.scheme;\n\t}\n\n\tsetOnUnknown(handler: () => any)\n\t{\n\t\tif (!Type.isFunction(handler))\n\t\t{\n\t\t\tthrow new TypeError('handler is not a function');\n\t\t}\n\n\t\tthis.onUnknownHandler = handler;\n\t}\n\n\tgetOnUnknownHandler(): () => any\n\t{\n\t\treturn this.onUnknownHandler;\n\t}\n\n\tstatic defaultOnUnknownHandler(node: BBCodeContentNode, scheme: BBCodeScheme): ?Array<BBCodeContentNode>\n\t{\n\t\tif (node.getType() === BBCodeNode.ELEMENT_NODE)\n\t\t{\n\t\t\tconst openingTag: string = node.getOpeningTag();\n\t\t\tconst closingTag: string = node.getClosingTag();\n\n\t\t\tnode.replace(\n\t\t\t\tscheme.createText(openingTag),\n\t\t\t\t...node.getChildren(),\n\t\t\t\tscheme.createText(closingTag),\n\t\t\t);\n\t\t}\n\t}\n\n\tstatic toLowerCase(value: string): string\n\t{\n\t\tif (Type.isStringFilled(value))\n\t\t{\n\t\t\treturn value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tparseText(text: string): Array<BBCodeTextNode | BBCodeSpecialCharNode>\n\t{\n\t\tif (Type.isStringFilled(text))\n\t\t{\n\t\t\treturn [...text]\n\t\t\t\t.reduce((acc: Array<BBCodeTextNode | BBCodeSpecialCharNode>, symbol: string) => {\n\t\t\t\t\tif (isSpecialChar(symbol))\n\t\t\t\t\t{\n\t\t\t\t\t\tacc.push(symbol);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tconst lastItem: string = acc.at(-1);\n\t\t\t\t\t\tif (isSpecialChar(lastItem) || Type.isNil(lastItem))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tacc.push(symbol);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tacc[acc.length - 1] += symbol;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn acc;\n\t\t\t\t}, [])\n\t\t\t\t.map((fragment: string) => {\n\t\t\t\t\tif (fragment === '\\n')\n\t\t\t\t\t{\n\t\t\t\t\t\treturn parserScheme.createNewLine();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (fragment === '\\t')\n\t\t\t\t\t{\n\t\t\t\t\t\treturn parserScheme.createTab();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn parserScheme.createText({ content: fragment });\n\t\t\t\t});\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tstatic findNextTagIndex(bbcode: string, startIndex = 0): number\n\t{\n\t\tconst nextContent: string = bbcode.slice(startIndex);\n\t\tconst [nextTag: ?string] = nextContent.match(new RegExp(TAG_REGEX)) || [];\n\t\tif (nextTag)\n\t\t{\n\t\t\treturn bbcode.indexOf(nextTag, startIndex);\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tstatic trimQuotes(value: string): string\n\t{\n\t\tconst source = String(value);\n\t\tif ((/^[\"'].*[\"']$/g).test(source))\n\t\t{\n\t\t\treturn source.slice(1, -1);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tparseAttributes(sourceAttributes: string): { value: ?string, attributes: Array<[string, string]> }\n\t{\n\t\tconst result: {value: string, attributes: Array<Array<string, string>>} = { value: '', attributes: [] };\n\n\t\tif (Type.isStringFilled(sourceAttributes))\n\t\t{\n\t\t\tif (sourceAttributes.startsWith('='))\n\t\t\t{\n\t\t\t\tresult.value = BBCodeParser.trimQuotes(\n\t\t\t\t\tsourceAttributes.slice(1),\n\t\t\t\t);\n\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\treturn sourceAttributes\n\t\t\t\t.trim()\n\t\t\t\t.split(' ')\n\t\t\t\t.filter(Boolean)\n\t\t\t\t.reduce((acc: typeof result, item: string) => {\n\t\t\t\t\tconst [key: string, value: string = ''] = item.split('=');\n\t\t\t\t\tacc.attributes.push([\n\t\t\t\t\t\tBBCodeParser.toLowerCase(key),\n\t\t\t\t\t\tBBCodeParser.trimQuotes(value),\n\t\t\t\t\t]);\n\n\t\t\t\t\treturn acc;\n\t\t\t\t}, result);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tparse(bbcode: string): BBCodeRootNode\n\t{\n\t\tconst result: BBCodeRootNode = parserScheme.createRoot();\n\t\tconst stack: Array<BBCodeElementNode> = [];\n\t\tlet current: ?BBCodeElementNode = null;\n\t\tlet level: number = -1;\n\n\t\tconst firstTagIndex: number = BBCodeParser.findNextTagIndex(bbcode);\n\t\tif (firstTagIndex !== 0)\n\t\t{\n\t\t\tconst textBeforeFirstTag: string = firstTagIndex === -1 ? bbcode : bbcode.slice(0, firstTagIndex);\n\t\t\tresult.appendChild(\n\t\t\t\t...this.parseText(textBeforeFirstTag),\n\t\t\t);\n\t\t}\n\n\t\tbbcode.replace(TAG_REGEX, (fullTag: string, slash: ?string, tagName: string, attrs: ?string, index: number) => {\n\t\t\tconst isOpenTag: boolean = Boolean(slash) === false;\n\t\t\tconst startIndex: number = fullTag.length + index;\n\t\t\tconst nextContent: string = bbcode.slice(startIndex);\n\t\t\tconst attributes = this.parseAttributes(attrs);\n\t\t\tconst lowerCaseTagName: string = BBCodeParser.toLowerCase(tagName);\n\t\t\tlet parent: ?(BBCodeRootNode | BBCodeElementNode) = null;\n\n\t\t\tif (isOpenTag)\n\t\t\t{\n\t\t\t\tlevel++;\n\n\t\t\t\tif (\n\t\t\t\t\tnextContent.includes(`[/${tagName}]`)\n\t\t\t\t\t|| isListItem(lowerCaseTagName)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tcurrent = parserScheme.createElement({\n\t\t\t\t\t\tname: lowerCaseTagName,\n\t\t\t\t\t\tvalue: attributes.value,\n\t\t\t\t\t\tattributes: Object.fromEntries(attributes.attributes),\n\t\t\t\t\t});\n\n\t\t\t\t\tconst nextTagIndex: number = BBCodeParser.findNextTagIndex(bbcode, startIndex);\n\t\t\t\t\tif (nextTagIndex !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst content: string = nextTagIndex === -1 ? nextContent : bbcode.slice(startIndex, nextTagIndex);\n\t\t\t\t\t\tcurrent.appendChild(\n\t\t\t\t\t\t\t...this.parseText(content),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconst tagScheme: BBCodeTagScheme = this.getScheme().getTagScheme(lowerCaseTagName);\n\t\t\t\t\tif (tagScheme.isVoid())\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrent = parserScheme.createElement({\n\t\t\t\t\t\t\tname: lowerCaseTagName,\n\t\t\t\t\t\t\tvalue: attributes.value,\n\t\t\t\t\t\t\tattributes: Object.fromEntries(attributes.attributes),\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tcurrent.setScheme(this.getScheme());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrent = parserScheme.createText(fullTag);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (level === 0)\n\t\t\t\t{\n\t\t\t\t\tresult.appendChild(current);\n\t\t\t\t}\n\n\t\t\t\tparent = stack[level - 1];\n\n\t\t\t\tif (isList(current.getName()))\n\t\t\t\t{\n\t\t\t\t\tif (parent && isList(parent.getName()))\n\t\t\t\t\t{\n\t\t\t\t\t\tstack[level].appendChild(current);\n\t\t\t\t\t}\n\t\t\t\t\telse if (parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tparent.appendChild(current);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (\n\t\t\t\t\tparent\n\t\t\t\t\t&& isList(parent.getName())\n\t\t\t\t\t&& !isListItem(current.getName())\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tconst lastItem: ?BBCodeContentNode = parent.getChildren().at(-1);\n\t\t\t\t\tif (lastItem)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastItem.appendChild(current);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (parent)\n\t\t\t\t{\n\t\t\t\t\tparent.appendChild(current);\n\t\t\t\t}\n\n\t\t\t\tstack[level] = current;\n\n\t\t\t\tif (isListItem(lowerCaseTagName) && level > -1)\n\t\t\t\t{\n\t\t\t\t\tlevel--;\n\t\t\t\t\tcurrent = level === -1 ? result : stack[level];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (current.getName() === '#text')\n\t\t\t{\n\t\t\t\tlevel--;\n\t\t\t}\n\n\t\t\tif (!isOpenTag || current.getName() === '#text' || current.isVoid())\n\t\t\t{\n\t\t\t\tif (level > -1 && current.getName() === lowerCaseTagName)\n\t\t\t\t{\n\t\t\t\t\tlevel--;\n\t\t\t\t\tcurrent = level === -1 ? result : stack[level];\n\t\t\t\t}\n\n\t\t\t\tconst nextTagIndex: number = BBCodeParser.findNextTagIndex(bbcode, startIndex);\n\t\t\t\tif (nextTagIndex !== startIndex)\n\t\t\t\t{\n\t\t\t\t\tparent = level === -1 ? result : stack[level];\n\n\t\t\t\t\tconst content: ?string = bbcode.slice(startIndex, nextTagIndex === -1 ? undefined : nextTagIndex);\n\t\t\t\t\tif (isList(parent.getName()))\n\t\t\t\t\t{\n\t\t\t\t\t\tconst lastItem: ?BBCodeContentNode = parent.getChildren().at(-1);\n\t\t\t\t\t\tif (lastItem)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlastItem.appendChild(\n\t\t\t\t\t\t\t\t...this.parseText(content),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tparent.appendChild(\n\t\t\t\t\t\t\t...this.parseText(content),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst getFinalLineBreaksIndexes = (node: BBCodeContentNode) => {\n\t\t\tlet skip = false;\n\n\t\t\treturn node\n\t\t\t\t.getChildren()\n\t\t\t\t.reduceRight((acc: Array<BBCodeContentNode>, child: BBCodeContentNode, index: number) => {\n\t\t\t\t\tif (!skip && child.getName() === '#linebreak')\n\t\t\t\t\t{\n\t\t\t\t\t\tacc.push(index);\n\t\t\t\t\t}\n\t\t\t\t\telse if (!skip && child.getName() !== '#tab')\n\t\t\t\t\t{\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn acc;\n\t\t\t\t}, []);\n\t\t};\n\n\t\tBBCodeNode.flattenAst(result).forEach((node: BBCodeContentNode) => {\n\t\t\tif (node.getName() === '*')\n\t\t\t{\n\t\t\t\tconst finalLinebreaksIndexes: Array<number> = getFinalLineBreaksIndexes(node);\n\t\t\t\tif (finalLinebreaksIndexes.length === 1)\n\t\t\t\t{\n\t\t\t\t\tnode.setChildren(\n\t\t\t\t\t\tnode.getChildren().slice(0, finalLinebreaksIndexes.at(0)),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (finalLinebreaksIndexes.length > 1 && (finalLinebreaksIndexes & 2) === 0)\n\t\t\t\t{\n\t\t\t\t\tnode.setChildren(\n\t\t\t\t\t\tnode.getChildren().slice(0, finalLinebreaksIndexes.at(0)),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tresult.setScheme(\n\t\t\tthis.getScheme(),\n\t\t\tthis.getOnUnknownHandler(),\n\t\t);\n\n\t\treturn result;\n\t}\n}\n\nexport {\n\tBBCodeParser,\n};\n"],"names":["ParserScheme","BBCodeScheme","getTagScheme","tagName","BBCodeTagScheme","name","isAllowedTag","TAG_REGEX","isSpecialChar","symbol","includes","isList","isListItem","parserScheme","BBCodeParser","constructor","options","scheme","setScheme","DefaultBBCodeScheme","Type","isFunction","onUnknown","setOnUnknown","defaultOnUnknownHandler","getScheme","handler","TypeError","onUnknownHandler","getOnUnknownHandler","node","getType","BBCodeNode","ELEMENT_NODE","openingTag","getOpeningTag","closingTag","getClosingTag","replace","createText","getChildren","toLowerCase","value","isStringFilled","parseText","text","reduce","acc","push","lastItem","at","isNil","length","map","fragment","createNewLine","createTab","content","findNextTagIndex","bbcode","startIndex","nextContent","slice","nextTag","match","RegExp","indexOf","trimQuotes","source","String","test","parseAttributes","sourceAttributes","result","attributes","startsWith","trim","split","filter","Boolean","item","key","parse","createRoot","stack","current","level","firstTagIndex","textBeforeFirstTag","appendChild","fullTag","slash","attrs","index","isOpenTag","lowerCaseTagName","parent","createElement","Object","fromEntries","nextTagIndex","tagScheme","isVoid","getName","undefined","getFinalLineBreaksIndexes","skip","reduceRight","child","flattenAst","forEach","finalLinebreaksIndexes","setChildren"],"mappings":"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"}