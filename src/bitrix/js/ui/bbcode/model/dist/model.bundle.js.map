{"version":3,"file":"model.bundle.js","sources":["../src/nodes/node.js","../src/nodes/element-node.js","../src/nodes/root-node.js","../src/nodes/fragment-node.js","../src/nodes/text-node.js","../src/nodes/new-line-node.js","../src/nodes/tab-node.js","../src/scheme/node-schemes/node-scheme.js","../src/scheme/node-schemes/tag-scheme.js","../src/scheme/bbcode-scheme.js","../src/scheme/node-schemes/text-scheme.js","../src/scheme/node-schemes/new-line-scheme.js","../src/scheme/node-schemes/tab-scheme.js","../src/scheme/default-bbcode-scheme.js"],"sourcesContent":["import { Type } from 'main.core';\nimport { typeof BBCodeElementNode } from './element-node';\nimport { typeof BBCodeTextNode } from './text-node';\nimport { typeof BBCodeNewLineNode } from './new-line-node';\nimport { typeof BBCodeTabNode } from './tab-node';\nimport { typeof BBCodeRootNode } from './root-node';\nimport { typeof BBCodeFragmentNode } from './fragment-node';\nimport { typeof BBCodeScheme } from '../scheme/bbcode-scheme';\nimport { type BBCodeNodeScheme } from '../scheme/node-schemes/node-scheme';\n\nexport type BBCodeSpecialCharNode = BBCodeNewLineNode | BBCodeTabNode;\nexport type BBCodeContentNode = BBCodeElementNode | BBCodeTextNode | BBCodeSpecialCharNode;\nexport type BBCodeParentNode = BBCodeRootNode | BBCodeElementNode | BBCodeFragmentNode;\n\nexport type BBCodeNodeOptions = {\n\tname?: string,\n\tparent?: BBCodeParentNode | null,\n\tchildren?: Array<BBCodeContentNode | BBCodeFragmentNode>,\n\tscheme: BBCodeScheme,\n};\n\nexport type SerializedBBCodeNode = {\n\tname: string,\n\tchildren: Array<SerializedBBCodeNode>,\n};\n\ntype PrivateMapKey = BBCodeNode | BBCodeContentNode | BBCodeRootNode | BBCodeFragmentNode;\ntype PrivateStorage = {[key: string]: any};\n\nexport const privateMap: WeakMap<PrivateMapKey, PrivateStorage> = new WeakMap();\nexport const nameSymbol: Symbol = Symbol('name');\n\nexport class BBCodeNode\n{\n\t[nameSymbol]: string = '#unknown';\n\tchildren: Array<BBCodeContentNode | BBCodeFragmentNode> = [];\n\n\tconstructor(options: BBCodeNodeOptions = {})\n\t{\n\t\tprivateMap.set(this, {\n\t\t\tdelayedChildren: [],\n\t\t});\n\n\t\tthis.setName(options.name);\n\t\tprivateMap.get(this).scheme = options.scheme;\n\t\tthis.setParent(options.parent);\n\t\tthis.setChildren(options.children);\n\t}\n\n\tstatic get ELEMENT_NODE(): number\n\t{\n\t\treturn 1;\n\t}\n\n\tstatic get TEXT_NODE(): number\n\t{\n\t\treturn 2;\n\t}\n\n\tstatic get ROOT_NODE(): number\n\t{\n\t\treturn 3;\n\t}\n\n\tstatic get FRAGMENT_NODE(): number\n\t{\n\t\treturn 4;\n\t}\n\n\tstatic freezeProperty(node: BBCodeNode, property: string, value: any, enumerable: boolean = true)\n\t{\n\t\tObject.defineProperty(node, property, {\n\t\t\tvalue,\n\t\t\twritable: false,\n\t\t\tconfigurable: false,\n\t\t\tenumerable,\n\t\t});\n\t}\n\n\tstatic makeNonEnumerableProperty(node: BBCodeNode, property: string)\n\t{\n\t\tObject.defineProperty(node, property, {\n\t\t\twritable: false,\n\t\t\tenumerable: false,\n\t\t\tconfigurable: false,\n\t\t});\n\t}\n\n\tstatic flattenChildren(children: Array<BBCodeContentNode | BBCodeFragmentNode>): Array<BBCodeContentNode>\n\t{\n\t\tif (Type.isArrayFilled(children))\n\t\t{\n\t\t\treturn children.flatMap((node: BBCodeContentNode | BBCodeFragmentNode) => {\n\t\t\t\tif (node.getType() === BBCodeNode.FRAGMENT_NODE)\n\t\t\t\t{\n\t\t\t\t\treturn node.getChildren();\n\t\t\t\t}\n\n\t\t\t\treturn node;\n\t\t\t});\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tsetScheme(scheme: BBCodeScheme, onUnknown: (node: BBCodeContentNode) => any)\n\t{\n\t\tprivateMap.get(this).scheme = scheme;\n\t}\n\n\tgetScheme(): BBCodeScheme\n\t{\n\t\treturn privateMap.get(this).scheme;\n\t}\n\n\tgetTagScheme(): BBCodeNodeScheme\n\t{\n\t\treturn this.getScheme().getTagScheme(this.getName());\n\t}\n\n\tprepareCase(value: string): string\n\t{\n\t\tconst scheme: BBCodeScheme = this.getScheme();\n\t\tconst currentCase = scheme.getOutputTagCase();\n\t\tif (currentCase === 'upper')\n\t\t{\n\t\t\treturn value.toUpperCase();\n\t\t}\n\n\t\treturn value.toLowerCase();\n\t}\n\n\tsetName(name: string)\n\t{\n\t\tif (Type.isString(name))\n\t\t{\n\t\t\tthis[nameSymbol] = name.toLowerCase();\n\t\t}\n\t}\n\n\tgetName(): string\n\t{\n\t\treturn this[nameSymbol];\n\t}\n\n\tgetDisplayedName(): string\n\t{\n\t\treturn this.prepareCase(this.getName());\n\t}\n\n\tsetParent(parent: BBCodeParentNode | null = null)\n\t{\n\t\tconst mounted = !this.hasParent() && parent;\n\t\tprivateMap.get(this).parent = parent;\n\n\t\tif (mounted)\n\t\t{\n\t\t\tthis.onNodeDidMount();\n\t\t}\n\t}\n\n\tgetParent(): BBCodeParentNode | null\n\t{\n\t\treturn privateMap.get(this).parent;\n\t}\n\n\tgetType(): number\n\t{\n\t\treturn privateMap.get(this).type;\n\t}\n\n\thasParent(): boolean\n\t{\n\t\treturn Boolean(privateMap.get(this).parent);\n\t}\n\n\tremove()\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tthis.getParent().removeChild(this);\n\t\t}\n\t}\n\n\tsetChildren(children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tif (Type.isArray(children))\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.appendChild(...children);\n\t\t}\n\t}\n\n\tgetChildren(): Array<BBCodeContentNode>\n\t{\n\t\treturn [...this.children];\n\t}\n\n\tgetLastChild(): ?BBCodeContentNode\n\t{\n\t\treturn this.getChildren().at(-1);\n\t}\n\n\tgetLastChildOfType(type: number): ?BBCodeContentNode\n\t{\n\t\treturn this.getChildren().reverse().find((node: BBCodeContentNode) => {\n\t\t\treturn node.getType() === type;\n\t\t});\n\t}\n\n\tgetLastChildOfName(name: string): ?BBCodeContentNode\n\t{\n\t\treturn this.getChildren().reverse().find((node: BBCodeContentNode) => {\n\t\t\treturn node.getType() === BBCodeNode.ELEMENT_NODE && node.getName() === name;\n\t\t});\n\t}\n\n\tgetFirstChild(): ?BBCodeContentNode\n\t{\n\t\treturn this.getChildren().at(0);\n\t}\n\n\tgetFirstChildOfType(type: number): ?BBCodeContentNode\n\t{\n\t\treturn this.getChildren().find((node: BBCodeContentNode) => {\n\t\t\treturn node.getType() === type;\n\t\t});\n\t}\n\n\tgetFirstChildOfName(name: string): ?BBCodeContentNode\n\t{\n\t\treturn this.getChildren().find((node: BBCodeContentNode) => {\n\t\t\treturn node.getType() === BBCodeNode.ELEMENT_NODE && node.getName() === name;\n\t\t});\n\t}\n\n\tgetPreviewsSibling(): ?BBCodeContentNode\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = this.getParent().getChildren();\n\t\t\tconst currentIndex: number = parentChildren.indexOf(this);\n\t\t\tif (currentIndex > 0)\n\t\t\t{\n\t\t\t\treturn parentChildren.at(currentIndex - 1);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetPreviewsSiblings(): ?Array<BBCodeContentNode>\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = this.getParent().getChildren();\n\t\t\tconst currentIndex: number = parentChildren.indexOf(this);\n\n\t\t\treturn parentChildren.filter((child: BBCodeContentNode, index) => {\n\t\t\t\treturn index < currentIndex;\n\t\t\t});\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetNextSibling(): ?BBCodeContentNode\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = this.getParent().getChildren();\n\t\t\tconst currentIndex: number = parentChildren.indexOf(this);\n\t\t\tif (currentIndex !== -1 && currentIndex !== parentChildren.length)\n\t\t\t{\n\t\t\t\treturn parentChildren.at(currentIndex + 1);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetNextSiblings(): ?Array<BBCodeContentNode>\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = this.getParent().getChildren();\n\t\t\tconst currentIndex: number = parentChildren.indexOf(this);\n\n\t\t\treturn parentChildren.filter((child: BBCodeContentNode, index) => {\n\t\t\t\treturn index > currentIndex;\n\t\t\t});\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetChildrenCount(): number\n\t{\n\t\treturn this.children.length;\n\t}\n\n\thasChildren(): boolean\n\t{\n\t\treturn this.getChildrenCount() > 0;\n\t}\n\n\tadjustChildren()\n\t{\n\t\tthis.setChildren(this.getChildren());\n\t}\n\n\tsetDelayedChildren(children: Array<BBCodeContentNode>)\n\t{\n\t\tif (Type.isArray(children))\n\t\t{\n\t\t\tprivateMap.get(this).delayedChildren = children;\n\t\t}\n\t}\n\n\taddDelayedChildren(children: Array<BBCodeContentNode>)\n\t{\n\t\tif (Type.isArrayFilled(children))\n\t\t{\n\t\t\tthis.setDelayedChildren([\n\t\t\t\t...this.getDelayedChildren(),\n\t\t\t\t...children,\n\t\t\t]);\n\t\t}\n\t}\n\n\thasDelayedChildren(): boolean\n\t{\n\t\treturn privateMap.get(this).delayedChildren.length > 0;\n\t}\n\n\tgetDelayedChildren(): Array<BBCodeContentNode>\n\t{\n\t\treturn [...privateMap.get(this).delayedChildren];\n\t}\n\n\tappendChild(...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\n\t\tflattenedChildren.forEach((node: BBCodeContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.push(node);\n\t\t});\n\t}\n\n\tprependChild(...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\n\t\tflattenedChildren.forEach((node: BBCodeContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.unshift(node);\n\t\t});\n\t}\n\n\tinsertBefore(...nodes: Array<BBCodeContentNode>)\n\t{\n\t\tif (this.hasParent() && Type.isArrayFilled(nodes))\n\t\t{\n\t\t\tconst parent: BBCodeContentNode = this.getParent();\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = parent.getChildren();\n\t\t\tconst currentNodeIndex: number = parentChildren.indexOf(this);\n\n\t\t\tconst deleteCount: number = 0;\n\t\t\tparentChildren.splice(currentNodeIndex, deleteCount, ...nodes);\n\n\t\t\tparent.setChildren(parentChildren);\n\t\t}\n\t}\n\n\tinsertAfter(...nodes: Array<BBCodeContentNode>)\n\t{\n\t\tif (this.hasParent() && Type.isArrayFilled(nodes))\n\t\t{\n\t\t\tconst parent: BBCodeContentNode = this.getParent();\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = parent.getChildren();\n\t\t\tconst currentNodeIndex: number = parentChildren.indexOf(this);\n\n\t\t\tconst startIndex: number = currentNodeIndex + 1;\n\t\t\tconst deleteCount: number = 0;\n\t\t\tparentChildren.splice(startIndex, deleteCount, ...nodes);\n\n\t\t\tparent.setChildren(parentChildren);\n\t\t}\n\t}\n\n\tpropagateChild(...children: Array<BBCodeContentNode>)\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tthis.insertBefore(\n\t\t\t\t...children.filter((child: BBCodeContentNode) => {\n\t\t\t\t\treturn !['#linebreak', '#tab'].includes(child.getName());\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addDelayedChildren(children);\n\t\t}\n\t}\n\n\tonNodeDidMount()\n\t{\n\t\tconst delayedChildren = this.getDelayedChildren();\n\t\tif (Type.isArrayFilled(delayedChildren))\n\t\t{\n\t\t\tthis.propagateChild(...delayedChildren);\n\t\t\tthis.setDelayedChildren([]);\n\t\t}\n\t}\n\n\tremoveChild(...children: Array<BBCodeContentNode>)\n\t{\n\t\tthis.children = this.children.reduce((acc: Array<BBCodeContentNode>, node: BBCodeContentNode) => {\n\t\t\tif (children.includes(node))\n\t\t\t{\n\t\t\t\tnode.setParent(null);\n\n\t\t\t\treturn acc;\n\t\t\t}\n\n\t\t\treturn [...acc, node];\n\t\t}, []);\n\t}\n\n\treplaceChild(targetNode: BBCodeContentNode, ...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tthis.children = this.children.flatMap((node: BBCodeContentNode) => {\n\t\t\tif (node === targetNode)\n\t\t\t{\n\t\t\t\tnode.setParent(null);\n\n\t\t\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\n\t\t\t\treturn flattenedChildren.map((child: BBCodeContentNode) => {\n\t\t\t\t\tchild.remove();\n\t\t\t\t\tchild.setParent(this);\n\n\t\t\t\t\treturn child;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn node;\n\t\t});\n\t}\n\n\treplace(...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parent = this.getParent();\n\t\t\tparent.replaceChild(this, ...children);\n\t\t}\n\t}\n\n\tclone(options: { deep: boolean } = {}): BBCodeNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn this.getScheme().createNode({\n\t\t\tname: this.getName(),\n\t\t\tparent: this.getParent(),\n\t\t\tchildren,\n\t\t});\n\t}\n\n\ttoPlainText(): string\n\t{\n\t\treturn this.getChildren().map((child) => {\n\t\t\treturn child.toPlainText();\n\t\t}).join('');\n\t}\n\n\tgetPlainTextLength(): number\n\t{\n\t\treturn this.toPlainText().length;\n\t}\n\n\tremovePreviewsSiblings()\n\t{\n\t\tconst removePreviewsSiblings = (node: BBCodeContentNode) => {\n\t\t\tconst previewsSiblings = node.getPreviewsSiblings();\n\t\t\tif (Type.isArray(previewsSiblings))\n\t\t\t{\n\t\t\t\tpreviewsSiblings.forEach((sibling: BBCodeContentNode) => {\n\t\t\t\t\tsibling.remove();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst parent = node.getParent();\n\t\t\tif (parent)\n\t\t\t{\n\t\t\t\tremovePreviewsSiblings(parent);\n\t\t\t}\n\t\t};\n\n\t\tremovePreviewsSiblings(this);\n\t}\n\n\tremoveNextSiblings()\n\t{\n\t\tconst removeNextSiblings = (node: BBCodeContentNode) => {\n\t\t\tconst nextSiblings = node.getNextSiblings();\n\t\t\tif (Type.isArray(nextSiblings))\n\t\t\t{\n\t\t\t\tnextSiblings.forEach((sibling: BBCodeContentNode) => {\n\t\t\t\t\tsibling.remove();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst parent = node.getParent();\n\t\t\tif (parent)\n\t\t\t{\n\t\t\t\tremoveNextSiblings(parent);\n\t\t\t}\n\t\t};\n\n\t\tremoveNextSiblings(this);\n\t}\n\n\tfindByTextIndex(index: number): ?{ node: BBCodeTextNode, startIndex: number, endIndex: number }\n\t{\n\t\tlet currentIndex = 0;\n\t\tlet startIndex = 0;\n\t\tlet endIndex = 0;\n\n\t\tconst node = BBCodeNode.flattenAst(this).find((child: BBCodeContentNode) => {\n\t\t\tif (\n\t\t\t\tchild.getName() === '#text'\n\t\t\t\t|| child.getName() === '#linebreak'\n\t\t\t\t|| child.getName() === '#tab'\n\t\t\t)\n\t\t\t{\n\t\t\t\tstartIndex = currentIndex;\n\t\t\t\tendIndex = startIndex + child.getLength();\n\t\t\t\tcurrentIndex = endIndex;\n\n\t\t\t\treturn index >= startIndex && endIndex >= index;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\n\t\tif (node)\n\t\t{\n\t\t\treturn { node, startIndex, endIndex };\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tsplit(options: { offset: number, byWord?: boolean}): Array<BBCodeContentNode>\n\t{\n\t\tconst { offset, byWord = false } = options;\n\t\tconst plainTextLength = this.getPlainTextLength();\n\n\t\tconst leftTree = (() => {\n\t\t\tif (plainTextLength === offset)\n\t\t\t{\n\t\t\t\treturn this.clone({ deep: true });\n\t\t\t}\n\n\t\t\tif (offset <= 0 || offset > plainTextLength)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst tree = this.clone({ deep: true });\n\t\t\tconst { node, startIndex } = tree.findByTextIndex(offset);\n\t\t\tconst [leftNode, rightNode] = node.split({ offset: offset - startIndex, byWord });\n\t\t\tif (leftNode)\n\t\t\t{\n\t\t\t\tnode.replace(leftNode);\n\t\t\t\tleftNode.removeNextSiblings();\n\t\t\t}\n\t\t\telse if (rightNode)\n\t\t\t{\n\t\t\t\trightNode.removeNextSiblings();\n\t\t\t\trightNode.remove();\n\t\t\t}\n\n\t\t\treturn tree;\n\t\t})();\n\n\t\tconst rightTree = (() => {\n\t\t\tif (plainTextLength === offset)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (offset === 0)\n\t\t\t{\n\t\t\t\treturn this.clone({ deep: true });\n\t\t\t}\n\n\t\t\tconst tree = this.clone({ deep: true });\n\t\t\tconst { node, startIndex } = tree.findByTextIndex(offset);\n\t\t\tconst [leftNode, rightNode] = node.split({ offset: offset - startIndex, byWord });\n\t\t\tif (rightNode)\n\t\t\t{\n\t\t\t\tnode.replace(rightNode);\n\t\t\t\trightNode.removePreviewsSiblings();\n\t\t\t}\n\t\t\telse if (leftNode)\n\t\t\t{\n\t\t\t\tleftNode.removePreviewsSiblings();\n\t\t\t\tif (leftNode.hasParent())\n\t\t\t\t{\n\t\t\t\t\tconst parent = leftNode.getParent();\n\t\t\t\t\tleftNode.remove();\n\t\t\t\t\tif (parent.getChildrenCount() === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tparent.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn tree;\n\t\t})();\n\n\t\treturn [leftTree, rightTree];\n\t}\n\n\tstatic flattenAst(ast): Array<any>\n\t{\n\t\tconst flat = [];\n\n\t\tconst traverse = (node: BBCodeContentNode) => {\n\t\t\tflat.push(node);\n\t\t\tif (node.hasChildren())\n\t\t\t{\n\t\t\t\tnode.getChildren().forEach((child: BBCodeContentNode) => {\n\t\t\t\t\ttraverse(child);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tif (ast.hasChildren())\n\t\t{\n\t\t\tast.getChildren().forEach((child: BBCodeContentNode) => {\n\t\t\t\ttraverse(child);\n\t\t\t});\n\t\t}\n\n\t\treturn flat;\n\t}\n\n\ttoJSON(): SerializedBBCodeNode\n\t{\n\t\treturn {\n\t\t\tname: this.getName(),\n\t\t\tchildren: this.getChildren().map((child: BBCodeContentNode) => {\n\t\t\t\treturn child.toJSON();\n\t\t\t}),\n\t\t};\n\t}\n}\n","import { Type, type JsonObject, type JsonValue } from 'main.core';\nimport { BBCodeNode, type BBCodeNodeOptions, type BBCodeContentNode, type SerializedBBCodeNode, privateMap } from './node';\nimport { typeof BBCodeFragmentNode } from './fragment-node';\nimport { type BBCodeNodeStringifier } from '../scheme/node-schemes/node-scheme';\nimport { typeof BBCodeTagScheme } from '../scheme/node-schemes/tag-scheme';\nimport { typeof BBCodeScheme } from '../scheme/bbcode-scheme';\n\nexport type BBCodeElementNodeValue = string | number | boolean;\n\nexport type BBCodeElementNodeOptions = BBCodeNodeOptions & {\n\tattributes?: JsonObject,\n\tvalue?: BBCodeElementNodeValue,\n};\n\nexport type SerializedBBCodeElementNode = SerializedBBCodeNode & {\n\tattributes: JsonObject,\n\tvalue: BBCodeElementNodeValue,\n};\n\nexport type FilteredChildren = {\n\tresolved: Array<BBCodeContentNode>,\n\tunresolved: Array<BBCodeContentNode>,\n};\n\nconst inlineSymbol = Symbol('inline');\nconst voidSymbol = Symbol('void');\n\nexport class BBCodeElementNode extends BBCodeNode\n{\n\tattributes: JsonObject = {};\n\tvalue: JsonValue = '';\n\t[inlineSymbol]: boolean = false;\n\t[voidSymbol]: boolean = false;\n\n\tconstructor(options: BBCodeElementNodeOptions = {})\n\t{\n\t\tsuper(options);\n\t\tprivateMap.get(this).type = BBCodeNode.ELEMENT_NODE;\n\n\t\tconst tagScheme: BBCodeTagScheme = this.getTagScheme();\n\n\t\tthis[inlineSymbol] = tagScheme.isInline();\n\t\tthis[voidSymbol] = tagScheme.isVoid();\n\n\t\tthis.setValue(options.value);\n\t\tthis.setAttributes(options.attributes);\n\t}\n\n\tsetScheme(scheme: BBCodeScheme, onUnknown: (node: BBCodeContentNode) => any)\n\t{\n\t\tthis.getChildren().forEach((node: BBCodeContentNode) => {\n\t\t\tnode.setScheme(scheme, onUnknown);\n\t\t});\n\n\t\tif (scheme.isAllowedTag(this.getName()))\n\t\t{\n\t\t\tsuper.setScheme(scheme);\n\n\t\t\tconst tagScheme: BBCodeTagScheme = this.getTagScheme();\n\t\t\tthis[inlineSymbol] = tagScheme.isInline();\n\t\t\tthis[voidSymbol] = tagScheme.isVoid();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsuper.setScheme(scheme);\n\t\t\tonUnknown(this, scheme);\n\t\t}\n\t}\n\n\tfilterChildren(children: Array<BBCodeContentNode>): FilteredChildren\n\t{\n\t\tconst filteredChildren: FilteredChildren = { resolved: [], unresolved: [] };\n\t\tconst tagScheme: BBCodeTagScheme = this.getTagScheme();\n\n\t\tconst allowedChildren: Array<string> = tagScheme.getAllowedChildren();\n\t\tif (allowedChildren.length === 0)\n\t\t{\n\t\t\tfilteredChildren.resolved = children;\n\n\t\t\treturn filteredChildren;\n\t\t}\n\n\t\tchildren.forEach((child: BBCodeContentNode) => {\n\t\t\tif (\n\t\t\t\tallowedChildren.includes(child.getName())\n\t\t\t\t|| (\n\t\t\t\t\tallowedChildren.includes('#inline')\n\t\t\t\t\t&& child.getType() === BBCodeNode.ELEMENT_NODE\n\t\t\t\t\t&& child.isInline()\n\t\t\t\t)\n\t\t\t\t|| (\n\t\t\t\t\tallowedChildren.includes('#void')\n\t\t\t\t\t&& child.getType() === BBCodeNode.ELEMENT_NODE\n\t\t\t\t\t&& child.isVoid()\n\t\t\t\t)\n\t\t\t)\n\t\t\t{\n\t\t\t\tfilteredChildren.resolved.push(child);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfilteredChildren.unresolved.push(child);\n\t\t\t}\n\t\t});\n\n\t\treturn filteredChildren;\n\t}\n\n\tconvertChildren(children: Array<BBCodeContentNode>): Array<BBCodeContentNode>\n\t{\n\t\tconst tagScheme: BBCodeTagScheme = this.getTagScheme();\n\t\tconst childConverter = tagScheme.getChildConverter();\n\t\tif (childConverter)\n\t\t{\n\t\t\tconst scheme: BBCodeScheme = this.getScheme();\n\n\t\t\treturn children.map((child: BBCodeNode) => {\n\t\t\t\treturn childConverter(child, scheme);\n\t\t\t});\n\t\t}\n\n\t\treturn children;\n\t}\n\n\tsetValue(value: BBCodeElementNodeValue)\n\t{\n\t\tif (Type.isString(value) || Type.isNumber(value) || Type.isBoolean(value))\n\t\t{\n\t\t\tthis.value = value;\n\t\t}\n\t}\n\n\tgetValue(): BBCodeElementNodeValue\n\t{\n\t\treturn this.value;\n\t}\n\n\tisVoid(): boolean\n\t{\n\t\treturn this[voidSymbol];\n\t}\n\n\tisInline(): boolean\n\t{\n\t\treturn this[inlineSymbol];\n\t}\n\n\tsetAttributes(attributes: JsonObject)\n\t{\n\t\tif (Type.isPlainObject(attributes))\n\t\t{\n\t\t\tconst entries = Object.entries(attributes).map(([key, value]) => {\n\t\t\t\treturn [key.toLowerCase(), value];\n\t\t\t});\n\n\t\t\tthis.attributes = Object.fromEntries(entries);\n\t\t}\n\t}\n\n\tsetAttribute(name: string, value: any)\n\t{\n\t\tif (Type.isStringFilled(name))\n\t\t{\n\t\t\tconst preparedName: string = name.toLowerCase();\n\t\t\tif (Type.isNil(value))\n\t\t\t{\n\t\t\t\tdelete this.attributes[preparedName];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.attributes[preparedName] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetAttribute(name: string): string | number | null\n\t{\n\t\tif (Type.isString(name))\n\t\t{\n\t\t\treturn this.attributes[name.toLowerCase()];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetAttributes(): JsonObject\n\t{\n\t\treturn { ...this.attributes };\n\t}\n\n\tappendChild(...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\t\tconst filteredChildren: FilteredChildren = this.filterChildren(flattenedChildren);\n\t\tconst convertedChildren: Array<BBCodeContentNode> = this.convertChildren(filteredChildren.resolved);\n\n\t\tconvertedChildren.forEach((node: BBCodeContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.push(node);\n\t\t});\n\n\t\tif (Type.isArrayFilled(filteredChildren.unresolved))\n\t\t{\n\t\t\tif (this.getScheme().isAllowedUnresolvedNodesHoisting())\n\t\t\t{\n\t\t\t\tthis.propagateChild(...filteredChildren.unresolved);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfilteredChildren.unresolved.forEach((node: BBCodeContentNode) => {\n\t\t\t\t\tnode.remove();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprependChild(...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\t\tconst filteredChildren: FilteredChildren = this.filterChildren(flattenedChildren);\n\t\tconst convertedChildren: Array<BBCodeContentNode> = this.convertChildren(filteredChildren.resolved);\n\n\t\tconvertedChildren.forEach((node: BBCodeContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.unshift(node);\n\t\t});\n\n\t\tif (Type.isArrayFilled(filteredChildren.unresolved))\n\t\t{\n\t\t\tif (this.getScheme().isAllowedUnresolvedNodesHoisting())\n\t\t\t{\n\t\t\t\tthis.propagateChild(...filteredChildren.unresolved);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfilteredChildren.unresolved.forEach((node: BBCodeContentNode) => {\n\t\t\t\t\tnode.remove();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\treplaceChild(targetNode: BBCodeContentNode, ...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tthis.children = this.children.flatMap((node: BBCodeContentNode) => {\n\t\t\tif (node === targetNode)\n\t\t\t{\n\t\t\t\tnode.setParent(null);\n\n\t\t\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\t\t\t\tconst filteredChildren: FilteredChildren = this.filterChildren(flattenedChildren);\n\t\t\t\tconst convertedChildren: Array<BBCodeContentNode> = this.convertChildren(filteredChildren.resolved);\n\n\t\t\t\treturn convertedChildren.map((child: BBCodeContentNode) => {\n\t\t\t\t\tchild.remove();\n\t\t\t\t\tchild.setParent(this);\n\n\t\t\t\t\treturn child;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn node;\n\t\t});\n\t}\n\n\ttoStringValue(): string\n\t{\n\t\tconst value: BBCodeElementNodeValue = this.getValue();\n\n\t\treturn value ? `=${value}` : '';\n\t}\n\n\ttoStringAttributes(): string\n\t{\n\t\treturn Object\n\t\t\t.entries(this.getAttributes())\n\t\t\t.map(([key: string, attrValue: string]) => {\n\t\t\t\tconst preparedKey: string = this.prepareCase(key);\n\n\t\t\t\treturn attrValue ? `${preparedKey}=${attrValue}` : preparedKey;\n\t\t\t})\n\t\t\t.join(' ');\n\t}\n\n\tgetContent(): string\n\t{\n\t\treturn this.getChildren()\n\t\t\t.map((child: BBCodeContentNode) => {\n\t\t\t\treturn child.toString();\n\t\t\t})\n\t\t\t.join('');\n\t}\n\n\tgetOpeningTag(): string\n\t{\n\t\tconst displayedName: string = this.getDisplayedName();\n\t\tconst tagValue: BBCodeElementNodeValue = this.toStringValue();\n\t\tconst attributes: JsonObject = this.toStringAttributes();\n\t\tconst formattedAttributes: string = Type.isStringFilled(attributes) ? ` ${attributes}` : '';\n\n\t\treturn `[${displayedName}${tagValue}${formattedAttributes}]`;\n\t}\n\n\tgetClosingTag(): string\n\t{\n\t\treturn `[/${this.getDisplayedName()}]`;\n\t}\n\n\tclone(options: { deep: boolean } = {}): BBCodeElementNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn this.getScheme().createElement({\n\t\t\tname: this.getName(),\n\t\t\tvoid: this.isVoid(),\n\t\t\tinline: this.isInline(),\n\t\t\tvalue: this.getValue(),\n\t\t\tattributes: { ...this.getAttributes() },\n\t\t\tchildren,\n\t\t});\n\t}\n\n\tsplitByChildIndex(index: number): Array<BBCodeElementNode | null>\n\t{\n\t\tif (!Type.isNumber(index))\n\t\t{\n\t\t\tthrow new TypeError('index is not a number');\n\t\t}\n\n\t\tconst childrenCount = this.getChildrenCount();\n\t\tif (index < 0 || index > childrenCount)\n\t\t{\n\t\t\tthrow new TypeError(`index '${index}' is out of range ${0}-${childrenCount}`);\n\t\t}\n\n\t\tconst leftNode = (() => {\n\t\t\tif (index === childrenCount)\n\t\t\t{\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (index === 0)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst leftChildren = this.getChildren().filter((child, childIndex) => {\n\t\t\t\treturn childIndex < index;\n\t\t\t});\n\n\t\t\tconst node = this.clone();\n\t\t\tnode.setChildren(leftChildren);\n\n\t\t\treturn node;\n\t\t})();\n\n\t\tconst rightNode = (() => {\n\t\t\tif (index === 0)\n\t\t\t{\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (index === childrenCount)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst rightChildren = this.getChildren();\n\t\t\tconst node = this.clone();\n\t\t\tnode.setChildren(rightChildren);\n\n\t\t\treturn node;\n\t\t})();\n\n\t\tif (leftNode && rightNode)\n\t\t{\n\t\t\tthis.replace(leftNode, rightNode);\n\t\t}\n\n\t\treturn [leftNode, rightNode];\n\t}\n\n\ttoString(): string\n\t{\n\t\tconst tagScheme: BBCodeTagScheme = this.getTagScheme();\n\t\tconst stringifier: BBCodeNodeStringifier = tagScheme.getStringifier();\n\t\tif (Type.isFunction(stringifier))\n\t\t{\n\t\t\tconst scheme: BBCodeScheme = this.getScheme();\n\n\t\t\treturn stringifier(this, scheme);\n\t\t}\n\n\t\tconst openingTag: string = this.getOpeningTag();\n\t\tconst content: string = this.getContent();\n\n\t\tif (this.isVoid())\n\t\t{\n\t\t\treturn `${openingTag}${content}`;\n\t\t}\n\n\t\tconst closingTag: string = this.getClosingTag();\n\n\t\treturn `${openingTag}${content}${closingTag}`;\n\t}\n\n\ttoJSON(): SerializedBBCodeElementNode\n\t{\n\t\treturn {\n\t\t\t...super.toJSON(),\n\t\t\tvalue: this.getValue(),\n\t\t\tattributes: this.getAttributes(),\n\t\t\tvoid: this.isVoid(),\n\t\t\tinline: this.isInline(),\n\t\t};\n\t}\n}\n","import { BBCodeNode, privateMap, nameSymbol, type BBCodeContentNode } from './node';\nimport { BBCodeElementNode } from './element-node';\nimport { typeof BBCodeScheme } from '../scheme/bbcode-scheme';\n\nexport type RootNodeOptions = {\n\tchildren: Array<BBCodeNode>,\n};\n\nexport class BBCodeRootNode extends BBCodeElementNode\n{\n\tconstructor(options: RootNodeOptions)\n\t{\n\t\tsuper({ ...options, name: '#root' });\n\t\tprivateMap.get(this).type = BBCodeNode.ROOT_NODE;\n\t\tBBCodeRootNode.makeNonEnumerableProperty(this, 'value');\n\t\tBBCodeRootNode.makeNonEnumerableProperty(this, 'attributes');\n\t\tBBCodeRootNode.freezeProperty(this, nameSymbol, '#root');\n\t}\n\n\tsetScheme(scheme: BBCodeScheme, onUnknown: (node: BBCodeContentNode) => any)\n\t{\n\t\tBBCodeNode.flattenAst(this).forEach((node: BBCodeContentNode) => {\n\t\t\tnode.setScheme(scheme, onUnknown);\n\t\t});\n\n\t\tsuper.setScheme(scheme);\n\n\t\tBBCodeNode.flattenAst(this).forEach((node: BBCodeContentNode) => {\n\t\t\tnode.adjustChildren();\n\t\t});\n\t}\n\n\tgetParent(): null\n\t{\n\t\treturn null;\n\t}\n\n\tclone(options: { deep: boolean } = {}): BBCodeRootNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn this.getScheme().createRoot({\n\t\t\tchildren,\n\t\t});\n\t}\n\n\ttoString(): string\n\t{\n\t\treturn this.getChildren()\n\t\t\t.map((child: BBCodeContentNode) => {\n\t\t\t\treturn child.toString();\n\t\t\t})\n\t\t\t.join('');\n\t}\n\n\ttoJSON(): any\n\t{\n\t\treturn this.getChildren().map((node: BBCodeNode) => {\n\t\t\treturn node.toJSON();\n\t\t});\n\t}\n}\n","import { BBCodeNode, nameSymbol, privateMap } from './node';\nimport { BBCodeElementNode } from './element-node';\n\nexport type FragmentNodeOptions = {\n\tchildren: Array<BBCodeNode>,\n};\n\nexport class BBCodeFragmentNode extends BBCodeElementNode\n{\n\tconstructor(options: FragmentNodeOptions)\n\t{\n\t\tsuper({ ...options, name: '#fragment' });\n\t\tprivateMap.get(this).type = BBCodeNode.FRAGMENT_NODE;\n\t\tBBCodeFragmentNode.makeNonEnumerableProperty(this, 'value');\n\t\tBBCodeFragmentNode.makeNonEnumerableProperty(this, 'attributes');\n\t\tBBCodeFragmentNode.freezeProperty(this, nameSymbol, '#fragment');\n\t}\n\n\tclone(options: { deep: boolean } = {}): BBCodeFragmentNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn this.getScheme().createFragment({\n\t\t\tchildren,\n\t\t});\n\t}\n}\n","import { Type } from 'main.core';\nimport { BBCodeNode, privateMap, nameSymbol, type BBCodeNodeOptions } from './node';\n\nexport const contentSymbol = Symbol('content');\n\nexport type BBCodeTextNodeContent = string | number;\n\nexport type BBCodeTextNodeOptions = BBCodeTextNodeContent | BBCodeNodeOptions & {\n\tcontent?: string,\n};\n\nexport type BBCodeSerializedTextNode = {\n\tname: string,\n\tcontent: BBCodeTextNodeContent,\n};\n\nexport class BBCodeTextNode extends BBCodeNode\n{\n\t[nameSymbol]: string = '#text';\n\t[contentSymbol]: string = '';\n\n\tconstructor(options: BBCodeTextNodeOptions = {})\n\t{\n\t\tconst nodeOptions: BBCodeTextNodeOptions = Type.isString(options) ? { content: options } : options;\n\t\tsuper(nodeOptions);\n\t\tprivateMap.get(this).type = BBCodeNode.TEXT_NODE;\n\t\tthis.setContent(nodeOptions.content);\n\t\tBBCodeNode.makeNonEnumerableProperty(this, 'children');\n\t}\n\n\tstatic isTextNodeContent(value: any): boolean\n\t{\n\t\treturn Type.isString(value) || Type.isNumber(value);\n\t}\n\n\tstatic decodeSpecialChars(content: BBCodeTextNodeContent): BBCodeTextNodeContent\n\t{\n\t\tif (BBCodeTextNode.isTextNodeContent(content))\n\t\t{\n\t\t\treturn content\n\t\t\t\t.replaceAll('&#91;', '[')\n\t\t\t\t.replaceAll('&#93;', ']');\n\t\t}\n\n\t\treturn content;\n\t}\n\n\tsetName(name: string)\n\t{}\n\n\tsetContent(content: BBCodeTextNodeContent)\n\t{\n\t\tif (BBCodeTextNode.isTextNodeContent(content))\n\t\t{\n\t\t\tthis[contentSymbol] = BBCodeTextNode.decodeSpecialChars(content);\n\t\t}\n\t}\n\n\tgetContent(): BBCodeTextNodeContent\n\t{\n\t\treturn BBCodeTextNode.decodeSpecialChars(this[contentSymbol]);\n\t}\n\n\tadjustChildren()\n\t{}\n\n\tgetLength(): number\n\t{\n\t\treturn String(this[contentSymbol]).length;\n\t}\n\n\tclone(options): BBCodeTextNode\n\t{\n\t\treturn this.getScheme().createText({\n\t\t\tcontent: this.getContent(),\n\t\t});\n\t}\n\n\tsplit(options: { offset: number, byWord?: boolean}): Array<BBCodeTextNode | null>\n\t{\n\t\tconst { offset: sourceOffset, byWord = false } = options;\n\n\t\tif (!Type.isNumber(sourceOffset))\n\t\t{\n\t\t\tthrow new TypeError('offset is not a number');\n\t\t}\n\n\t\tconst contentLength = this.getLength();\n\t\tif (sourceOffset < 0 || sourceOffset > contentLength)\n\t\t{\n\t\t\tthrow new TypeError(`offset '${sourceOffset}' is out of range ${0}-${contentLength}`);\n\t\t}\n\n\t\tconst content = this.getContent();\n\n\t\tconst offset = (() => {\n\t\t\tif (byWord && sourceOffset !== contentLength)\n\t\t\t{\n\t\t\t\tconst lastIndex = content.lastIndexOf(' ', sourceOffset);\n\t\t\t\tif (lastIndex !== -1)\n\t\t\t\t{\n\t\t\t\t\tif (sourceOffset > lastIndex)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn lastIndex + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn lastIndex;\n\t\t\t\t}\n\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\treturn sourceOffset;\n\t\t})();\n\n\t\tconst leftNode = (() => {\n\t\t\tif (offset === contentLength)\n\t\t\t{\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (offset === 0)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst node = this.clone();\n\t\t\tnode.setContent(content.slice(0, offset));\n\n\t\t\treturn node;\n\t\t})();\n\n\t\tconst rightNode = (() => {\n\t\t\tif (offset === 0)\n\t\t\t{\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (offset === contentLength)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst node = this.clone();\n\t\t\tnode.setContent(content.slice(offset, contentLength));\n\n\t\t\treturn node;\n\t\t})();\n\n\t\treturn [leftNode, rightNode];\n\t}\n\n\ttoString(): string\n\t{\n\t\treturn this.getContent();\n\t}\n\n\ttoPlainText(): string\n\t{\n\t\treturn this.toString();\n\t}\n\n\ttoJSON(): BBCodeSerializedTextNode\n\t{\n\t\treturn {\n\t\t\tname: this.getName(),\n\t\t\tcontent: this.toString(),\n\t\t};\n\t}\n}\n","import { nameSymbol } from './node';\nimport { BBCodeTextNode, contentSymbol, type BBCodeTextNodeContent, type BBCodeTextNodeOptions } from './text-node';\n\nexport class BBCodeNewLineNode extends BBCodeTextNode\n{\n\t[nameSymbol]: string = '#linebreak';\n\t[contentSymbol]: string = '\\n';\n\n\tconstructor(options: BBCodeTextNodeOptions = {})\n\t{\n\t\tsuper(options);\n\t}\n\n\tsetContent(options: BBCodeTextNodeContent)\n\t{}\n\n\tclone(options): BBCodeNewLineNode\n\t{\n\t\treturn this.getScheme().createNewLine();\n\t}\n}\n","import { nameSymbol } from './node';\nimport { BBCodeTextNode, contentSymbol, type BBCodeTextNodeContent, type BBCodeTextNodeOptions } from './text-node';\n\nexport class BBCodeTabNode extends BBCodeTextNode\n{\n\t[nameSymbol]: string = '#tab';\n\t[contentSymbol]: string = '\\t';\n\n\tconstructor(options: BBCodeTextNodeOptions = {})\n\t{\n\t\tsuper(options);\n\t}\n\n\tsetContent(options: BBCodeTextNodeContent)\n\t{}\n\n\tclone(options): BBCodeTabNode\n\t{\n\t\treturn this.getScheme().createTab();\n\t}\n}\n","import { Type } from 'main.core';\nimport type { BBCodeContentNode } from '../../nodes/node';\nimport { typeof BBCodeScheme } from '../bbcode-scheme';\n\nexport type BBCodeNodeConverter = (node: BBCodeContentNode, scheme: BBCodeScheme) => BBCodeContentNode | Array<BBCodeContentNode> | null;\nexport type BBCodeNodeStringifier = (node: BBCodeContentNode, scheme: BBCodeScheme) => string;\nexport type BBCodeNodeSerializer = (node: BBCodeContentNode, scheme: BBCodeScheme) => any;\nexport type BBCodeNodeName = string;\n\nexport type BBCodeNodeSchemeOptions = {\n\tname: string | Array<BBCodeNodeName>,\n\tconvert?: BBCodeNodeConverter,\n\tstringify?: BBCodeNodeStringifier,\n\tserialize?: BBCodeNodeSerializer,\n};\n\nexport class BBCodeNodeScheme\n{\n\tname: Array<BBCodeNodeName> = [];\n\tconverter: BBCodeNodeConverter | null = null;\n\tstringifier: BBCodeNodeStringifier | null = null;\n\tserializer: BBCodeNodeSerializer | null = null;\n\n\tconstructor(options: BBCodeNodeSchemeOptions)\n\t{\n\t\tif (!Type.isPlainObject(options))\n\t\t{\n\t\t\tthrow new TypeError('options is not a object');\n\t\t}\n\n\t\tif (\n\t\t\t!Type.isArrayFilled(this.name)\n\t\t\t&& !Type.isArrayFilled(options.name)\n\t\t\t&& !Type.isStringFilled(options.name)\n\t\t)\n\t\t{\n\t\t\tthrow new TypeError('options.name is not specified');\n\t\t}\n\n\t\tthis.setName(options.name);\n\t\tthis.setConverter(options.convert);\n\t\tthis.setStringifier(options.stringify);\n\t\tthis.setSerializer(options.serialize);\n\t}\n\n\tsetName(name: BBCodeNodeSchemeOptions['name'])\n\t{\n\t\tif (Type.isStringFilled(name))\n\t\t{\n\t\t\tthis.name = [name];\n\t\t}\n\n\t\tif (Type.isArrayFilled(name))\n\t\t{\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\n\tgetName(): Array<string>\n\t{\n\t\treturn [...this.name];\n\t}\n\n\tremoveName(...names: Array<BBCodeNodeName>)\n\t{\n\t\tthis.setName(\n\t\t\tthis.getName().filter((name: BBCodeNodeName) => {\n\t\t\t\treturn !names.includes(name);\n\t\t\t}),\n\t\t);\n\t}\n\n\tsetConverter(converter: BBCodeNodeConverter | null)\n\t{\n\t\tif (Type.isFunction(converter) || Type.isNull(converter))\n\t\t{\n\t\t\tthis.converter = converter;\n\t\t}\n\t}\n\n\tgetConverter(): BBCodeNodeConverter | null\n\t{\n\t\treturn this.converter;\n\t}\n\n\tsetStringifier(stringifier: BBCodeNodeStringifier | null)\n\t{\n\t\tif (Type.isFunction(stringifier) || Type.isNull(stringifier))\n\t\t{\n\t\t\tthis.stringifier = stringifier;\n\t\t}\n\t}\n\n\tgetStringifier(): BBCodeNodeStringifier | null\n\t{\n\t\treturn this.stringifier;\n\t}\n\n\tsetSerializer(serializer: BBCodeNodeSerializer | null)\n\t{\n\t\tif (Type.isFunction(serializer) || Type.isNull(serializer))\n\t\t{\n\t\t\tthis.serializer = serializer;\n\t\t}\n\t}\n\n\tgetSerializer(): BBCodeNodeSerializer | null\n\t{\n\t\treturn this.serializer;\n\t}\n}\n","import { Type } from 'main.core';\nimport {\n\tBBCodeNodeScheme,\n\ttype BBCodeNodeSchemeOptions,\n\ttype BBCodeNodeConverter,\n\ttype BBCodeNodeName,\n} from './node-scheme';\nimport { typeof BBCodeElementNode } from '../../nodes/element-node';\nimport { BBCodeNode, type BBCodeContentNode } from '../../nodes/node';\n\nexport type BBCodeTagSchemeOptions = BBCodeNodeSchemeOptions & {\n\tinline?: boolean,\n\tvoid?: boolean,\n\tconvertChild?: BBCodeNodeConverter,\n\tallowedChildren?: Array<BBCodeNodeName>,\n};\n\nexport class BBCodeTagScheme extends BBCodeNodeScheme\n{\n\tinline: boolean = false;\n\tvoid: boolean = false;\n\tchildConverter: BBCodeNodeConverter | null = null;\n\tallowedChildren: Array<BBCodeNodeName> = [];\n\n\tconstructor(options: BBCodeTagSchemeOptions)\n\t{\n\t\tsuper(options);\n\t\tthis.setInline(options.inline);\n\t\tthis.setVoid(options.void);\n\t\tthis.setChildConverter(options.convertChild);\n\t\tthis.setAllowedChildren(options.allowedChildren);\n\t}\n\n\tstatic defaultBlockStringifier(node: BBCodeElementNode): string\n\t{\n\t\tconst isAllowNewlineBeforeOpeningTag: boolean = (() => {\n\t\t\tconst previewsSibling: ?BBCodeContentNode = node.getPreviewsSibling();\n\n\t\t\treturn previewsSibling && previewsSibling.getName() !== '#linebreak';\n\t\t})();\n\t\tconst isAllowNewlineAfterOpeningTag: boolean = (() => {\n\t\t\tconst firstChild: ?BBCodeContentNode = node.getFirstChild();\n\n\t\t\treturn firstChild && firstChild.getName() !== '#linebreak';\n\t\t})();\n\t\tconst isAllowNewlineBeforeClosingTag: boolean = (() => {\n\t\t\tconst lastChild: ?BBCodeContentNode = node.getLastChild();\n\n\t\t\treturn lastChild && lastChild.getName() !== '#linebreak';\n\t\t})();\n\t\tconst isAllowNewlineAfterClosingTag: boolean = (() => {\n\t\t\tconst nextSibling: ?BBCodeContentNode = node.getNextSibling();\n\n\t\t\treturn (\n\t\t\t\tnextSibling\n\t\t\t\t&& nextSibling.getName() !== '#linebreak'\n\t\t\t\t&& !(\n\t\t\t\t\tnextSibling.getType() === BBCodeNode.ELEMENT_NODE\n\t\t\t\t\t&& !nextSibling.isInline()\n\t\t\t\t)\n\t\t\t);\n\t\t})();\n\n\t\tconst openingTag: string = node.getOpeningTag();\n\t\tconst content: string = node.getContent();\n\t\tconst closingTag: string = node.getClosingTag();\n\n\t\treturn [\n\t\t\tisAllowNewlineBeforeOpeningTag ? '\\n' : '',\n\t\t\topeningTag,\n\t\t\tisAllowNewlineAfterOpeningTag ? '\\n' : '',\n\t\t\tcontent,\n\t\t\tisAllowNewlineBeforeClosingTag ? '\\n' : '',\n\t\t\tclosingTag,\n\t\t\tisAllowNewlineAfterClosingTag ? '\\n' : '',\n\t\t].join('');\n\t}\n\n\tsetInline(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis.inline = value;\n\t\t}\n\t}\n\n\tisInline(): boolean\n\t{\n\t\treturn this.inline;\n\t}\n\n\tsetVoid(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis.void = value;\n\t\t}\n\t}\n\n\tisVoid(): boolean\n\t{\n\t\treturn this.void;\n\t}\n\n\tsetChildConverter(converter: BBCodeNodeConverter | null)\n\t{\n\t\tif (Type.isFunction(converter) || Type.isNull(converter))\n\t\t{\n\t\t\tthis.childConverter = converter;\n\t\t}\n\t}\n\n\tgetChildConverter(): BBCodeNodeConverter | null\n\t{\n\t\treturn this.childConverter;\n\t}\n\n\tsetAllowedChildren(allowedChildren: Array<BBCodeNodeName>)\n\t{\n\t\tif (Type.isArray(allowedChildren))\n\t\t{\n\t\t\tthis.allowedChildren = allowedChildren;\n\t\t}\n\t}\n\n\tgetAllowedChildren(): Array<BBCodeNodeName>\n\t{\n\t\treturn [...this.allowedChildren];\n\t}\n}\n","import { Type } from 'main.core';\nimport { BBCodeTagScheme } from './node-schemes/tag-scheme';\nimport { BBCodeNode, type BBCodeNodeOptions } from '../nodes/node';\nimport { BBCodeRootNode, type RootNodeOptions } from '../nodes/root-node';\nimport { BBCodeFragmentNode, type FragmentNodeOptions } from '../nodes/fragment-node';\nimport { BBCodeElementNode, type BBCodeElementNodeOptions } from '../nodes/element-node';\nimport { BBCodeTextNode, type BBCodeTextNodeOptions } from '../nodes/text-node';\nimport { BBCodeNewLineNode } from '../nodes/new-line-node';\nimport { BBCodeTabNode } from '../nodes/tab-node';\nimport { BBCodeNodeScheme } from './node-schemes/node-scheme';\n\nexport type OutputTagCases = $Values<BBCodeScheme.Case>;\n\nexport type BBCodeSchemeOptions = {\n\ttagSchemes: Array<BBCodeTagScheme>,\n\toutputTagCase?: OutputTagCases,\n\tunresolvedNodesHoisting?: boolean,\n};\n\nexport class BBCodeScheme\n{\n\tstatic Case: {[key: string]: string} = {\n\t\tLOWER: 'lower',\n\t\tUPPER: 'upper',\n\t};\n\n\ttagSchemes: Array<BBCodeTagScheme> = [];\n\toutputTagCase: OutputTagCases = BBCodeScheme.Case.LOWER;\n\tunresolvedNodesHoisting: boolean = true;\n\n\tstatic isNodeScheme(value: any): boolean\n\t{\n\t\treturn value instanceof BBCodeNodeScheme;\n\t}\n\n\tconstructor(options: BBCodeSchemeOptions = {})\n\t{\n\t\tif (!Type.isPlainObject(options))\n\t\t{\n\t\t\tthrow new TypeError('options is not a object');\n\t\t}\n\n\t\tthis.setTagSchemes(options.tagSchemes);\n\t\tthis.setOutputTagCase(options.outputTagCase);\n\t\tthis.setUnresolvedNodesHoisting(options.unresolvedNodesHoisting);\n\t}\n\n\tsetTagSchemes(tagSchemes: Array<BBCodeTagScheme>)\n\t{\n\t\tif (Type.isArray(tagSchemes))\n\t\t{\n\t\t\tconst invalidSchemeIndex: number = tagSchemes.findIndex((scheme: BBCodeTagScheme): boolean => {\n\t\t\t\treturn !BBCodeScheme.isNodeScheme(scheme);\n\t\t\t});\n\n\t\t\tif (invalidSchemeIndex > -1)\n\t\t\t{\n\t\t\t\tthrow new TypeError(`tagScheme #${invalidSchemeIndex} is not TagScheme instance`);\n\t\t\t}\n\n\t\t\tthis.tagSchemes = [...tagSchemes];\n\t\t}\n\t}\n\n\tsetTagScheme(...tagSchemes: Array<BBCodeTagScheme>)\n\t{\n\t\tconst invalidSchemeIndex: number = tagSchemes.findIndex((scheme: BBCodeTagScheme): boolean => {\n\t\t\treturn !BBCodeScheme.isNodeScheme(scheme);\n\t\t});\n\n\t\tif (invalidSchemeIndex > -1)\n\t\t{\n\t\t\tthrow new TypeError(`tagScheme #${invalidSchemeIndex} is not TagScheme instance`);\n\t\t}\n\n\t\tconst newTagSchemesNames: Array<string> = tagSchemes.flatMap((scheme: BBCodeTagScheme) => {\n\t\t\treturn scheme.getName();\n\t\t});\n\n\t\tconst currentTagSchemes: Array<BBCodeTagScheme> = this.getTagSchemes();\n\t\tcurrentTagSchemes.forEach((scheme: BBCodeTagScheme) => {\n\t\t\tscheme.removeName(...newTagSchemesNames);\n\t\t});\n\n\t\tconst filteredCurrentTagSchemes: Array<BBCodeTagScheme> = currentTagSchemes.filter((scheme: BBCodeTagScheme) => {\n\t\t\treturn Type.isArrayFilled(scheme.getName());\n\t\t});\n\n\t\tthis.setTagSchemes([\n\t\t\t...filteredCurrentTagSchemes,\n\t\t\t...tagSchemes,\n\t\t]);\n\t}\n\n\tgetTagSchemes(): Array<BBCodeTagScheme>\n\t{\n\t\treturn [...this.tagSchemes];\n\t}\n\n\tgetTagScheme(tagName: string): BBCodeTagScheme\n\t{\n\t\treturn this.getTagSchemes().find((scheme: BBCodeTagScheme): boolean => {\n\t\t\treturn scheme.getName().includes(String(tagName).toLowerCase());\n\t\t});\n\t}\n\n\tsetOutputTagCase(tagCase: $Values<BBCodeScheme.Case>)\n\t{\n\t\tif (!Type.isNil(tagCase))\n\t\t{\n\t\t\tconst allowedCases = Object.values(BBCodeScheme.Case);\n\t\t\tif (allowedCases.includes(tagCase))\n\t\t\t{\n\t\t\t\tthis.outputTagCase = tagCase;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new TypeError(`'${tagCase}' is not allowed`);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetOutputTagCase(): $Values<BBCodeScheme.Case>\n\t{\n\t\treturn this.outputTagCase;\n\t}\n\n\tsetUnresolvedNodesHoisting(value: boolean)\n\t{\n\t\tif (!Type.isNil(value))\n\t\t{\n\t\t\tif (Type.isBoolean(value))\n\t\t\t{\n\t\t\t\tthis.unresolvedNodesHoisting = value;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new TypeError(`'${value}' is not allowed value`);\n\t\t\t}\n\t\t}\n\t}\n\n\tisAllowedUnresolvedNodesHoisting(): boolean\n\t{\n\t\treturn this.unresolvedNodesHoisting;\n\t}\n\n\tgetAllowedTags(): Array<string>\n\t{\n\t\treturn this.getTagSchemes().flatMap((tagScheme: BBCodeTagScheme) => {\n\t\t\treturn tagScheme.getName();\n\t\t});\n\t}\n\n\tisAllowedTag(tagName: string): boolean\n\t{\n\t\tconst allowedTags: Array<string> = this.getAllowedTags();\n\n\t\treturn allowedTags.includes(String(tagName).toLowerCase());\n\t}\n\n\tcreateRoot(options: RootNodeOptions = {}): BBCodeRootNode\n\t{\n\t\treturn new BBCodeRootNode({\n\t\t\t...options,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateNode(options: BBCodeNodeOptions): BBCodeNode\n\t{\n\t\tif (!Type.isPlainObject(options))\n\t\t{\n\t\t\tthrow new TypeError('options is not a object');\n\t\t}\n\n\t\tif (!Type.isStringFilled(options.name))\n\t\t{\n\t\t\tthrow new TypeError('options.name is required');\n\t\t}\n\n\t\tif (!this.isAllowedTag(options.name))\n\t\t{\n\t\t\tthrow new TypeError(`Scheme for \"${options.name}\" tag is not specified.`);\n\t\t}\n\n\t\treturn new BBCodeNode({\n\t\t\t...options,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateElement(options: BBCodeElementNodeOptions = {}): BBCodeElementNode\n\t{\n\t\tif (!Type.isPlainObject(options))\n\t\t{\n\t\t\tthrow new TypeError('options is not a object');\n\t\t}\n\n\t\tif (!Type.isStringFilled(options.name))\n\t\t{\n\t\t\tthrow new TypeError('options.name is required');\n\t\t}\n\n\t\tif (!this.isAllowedTag(options.name))\n\t\t{\n\t\t\tthrow new TypeError(`Scheme for \"${options.name}\" tag is not specified.`);\n\t\t}\n\n\t\treturn new BBCodeElementNode({\n\t\t\t...options,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateText(options: BBCodeTextNodeOptions = {}): BBCodeTextNode\n\t{\n\t\tconst preparedOptions = Type.isPlainObject(options) ? options : { content: options };\n\n\t\treturn new BBCodeTextNode({\n\t\t\t...preparedOptions,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateNewLine(options: BBCodeTextNodeOptions = {}): BBCodeNewLineNode\n\t{\n\t\tconst preparedOptions = Type.isPlainObject(options) ? options : { content: options };\n\n\t\treturn new BBCodeNewLineNode({\n\t\t\t...preparedOptions,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateTab(options: BBCodeTextNodeOptions = {}): BBCodeTabNode\n\t{\n\t\tconst preparedOptions = Type.isPlainObject(options) ? options : { content: options };\n\n\t\treturn new BBCodeTabNode({\n\t\t\t...preparedOptions,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateFragment(options: FragmentNodeOptions = {}): BBCodeFragmentNode\n\t{\n\t\treturn new BBCodeFragmentNode({\n\t\t\t...options,\n\t\t\tscheme: this,\n\t\t});\n\t}\n}\n","import { BBCodeNodeScheme } from './node-scheme';\n\nexport class BBCodeTextScheme extends BBCodeNodeScheme\n{\n\tconstructor(options)\n\t{\n\t\tsuper({ ...options, name: ['#text'] });\n\t}\n}\n","import { BBCodeNodeScheme } from './node-scheme';\n\nexport class BBCodeNewLineScheme extends BBCodeNodeScheme\n{\n\tname: ['#linebreak'];\n}\n","import { BBCodeNodeScheme } from './node-scheme';\n\nexport class BBCodeTabScheme extends BBCodeNodeScheme\n{\n\tconstructor(options)\n\t{\n\t\tsuper({ ...options, name: ['tab'] });\n\t}\n}\n","import { Type } from 'main.core';\nimport { BBCodeScheme } from './bbcode-scheme';\nimport { BBCodeTagScheme } from './node-schemes/tag-scheme';\nimport { BBCodeTextScheme } from './node-schemes/text-scheme';\nimport { BBCodeTabScheme } from './node-schemes/tab-scheme';\nimport { typeof BBCodeTextNode } from '../nodes/text-node';\nimport { typeof BBCodeElementNode } from '../nodes/element-node';\nimport type { BBCodeContentNode } from '../nodes/node';\nimport type { BBCodeSchemeOptions } from './bbcode-scheme';\n\nexport class DefaultBBCodeScheme extends BBCodeScheme\n{\n\tconstructor(options: BBCodeSchemeOptions = {})\n\t{\n\t\tsuper({\n\t\t\ttagSchemes: [\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: ['b', 'i', 'u', 's', 'span'],\n\t\t\t\t\tinline: true,\n\t\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline'],\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: ['img'],\n\t\t\t\t\tinline: true,\n\t\t\t\t\tallowedChildren: ['#text'],\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: ['url'],\n\t\t\t\t\tinline: true,\n\t\t\t\t\tallowedChildren: ['#text', 'b', 'i', 'u', 's'],\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: 'p',\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline', 'disk', 'video'],\n\t\t\t\t\tstringify: BBCodeTagScheme.defaultBlockStringifier,\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: 'list',\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['*'],\n\t\t\t\t\tstringify: BBCodeTagScheme.defaultBlockStringifier,\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: ['*'],\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline', 'list'],\n\t\t\t\t\tstringify: (node: BBCodeElementNode) => {\n\t\t\t\t\t\tconst openingTag: string = node.getOpeningTag();\n\t\t\t\t\t\tconst content: string = node.getContent().trim();\n\n\t\t\t\t\t\treturn `${openingTag}${content}`;\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: ['ul'],\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['li'],\n\t\t\t\t\tconvert: (node: BBCodeElementNode, scheme: BBCodeScheme) => {\n\t\t\t\t\t\treturn scheme.createElement({\n\t\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\t\tattributes: node.getAttributes(),\n\t\t\t\t\t\t\tchildren: node.getChildren(),\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: ['ol'],\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['li'],\n\t\t\t\t\tconvert: (node: BBCodeElementNode, scheme: BBCodeScheme) => {\n\t\t\t\t\t\treturn scheme.createElement({\n\t\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\t\tvalue: '1',\n\t\t\t\t\t\t\tattributes: node.getAttributes(),\n\t\t\t\t\t\t\tchildren: node.getChildren(),\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: ['li'],\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline', 'ul', 'ol'],\n\t\t\t\t\tconvert: (node: BBCodeElementNode, scheme: BBCodeScheme) => {\n\t\t\t\t\t\treturn scheme.createElement({\n\t\t\t\t\t\t\tname: '*',\n\t\t\t\t\t\t\tchildren: node.getChildren(),\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: 'table',\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['tr'],\n\t\t\t\t\tstringify: BBCodeTagScheme.defaultBlockStringifier,\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: 'tr',\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['th', 'td'],\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: ['th', 'td'],\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline'],\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: 'quote',\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline', 'quote'],\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: 'code',\n\t\t\t\t\tinline: false,\n\t\t\t\t\tstringify: BBCodeTagScheme.defaultBlockStringifier,\n\t\t\t\t\tconvertChild: (child: BBCodeContentNode, scheme: BBCodeScheme): BBCodeContentNode => {\n\t\t\t\t\t\tif (['#linebreak', '#tab', '#text'].includes(child.getName()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn child;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn scheme.createText(child.toString());\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: 'video',\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: ['#text'],\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: 'spoiler',\n\t\t\t\t\tinline: false,\n\t\t\t\t\tallowedChildren: [\n\t\t\t\t\t\t'#text',\n\t\t\t\t\t\t'#linebreak',\n\t\t\t\t\t\t'#inline',\n\t\t\t\t\t\t'p',\n\t\t\t\t\t\t'quote',\n\t\t\t\t\t\t'code',\n\t\t\t\t\t\t'table',\n\t\t\t\t\t\t'disk',\n\t\t\t\t\t\t'video',\n\t\t\t\t\t\t'spoiler',\n\t\t\t\t\t\t'list',\n\t\t\t\t\t],\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: ['user', 'project', 'department'],\n\t\t\t\t\tinline: true,\n\t\t\t\t\tallowedChildren: ['#text', 'b', 'u', 'i', 's'],\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: 'disk',\n\t\t\t\t\tvoid: true,\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: ['#root', '#fragment'],\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTextScheme({\n\t\t\t\t\tconvert: (node: BBCodeTextNode, scheme: BBCodeScheme) => {\n\t\t\t\t\t\treturn scheme.createText({\n\t\t\t\t\t\t\tcontent: node.toString().replaceAll(' - ', '&mdash;'),\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tnew BBCodeTabScheme({\n\t\t\t\t\tstringify: () => {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t],\n\t\t\toutputTagCase: BBCodeScheme.Case.LOWER,\n\t\t\tunresolvedNodesHoisting: true,\n\t\t});\n\n\t\tif (Type.isPlainObject(options))\n\t\t{\n\t\t\tthis.setTagSchemes(options.tagSchemes);\n\t\t\tthis.setOutputTagCase(options.outputTagCase);\n\t\t\tthis.setUnresolvedNodesHoisting(options.unresolvedNodesHoisting);\n\t\t}\n\t}\n}\n"],"names":["privateMap","WeakMap","nameSymbol","Symbol","BBCodeNode","constructor","options","children","set","delayedChildren","setName","name","get","scheme","setParent","parent","setChildren","ELEMENT_NODE","TEXT_NODE","ROOT_NODE","FRAGMENT_NODE","freezeProperty","node","property","value","enumerable","Object","defineProperty","writable","configurable","makeNonEnumerableProperty","flattenChildren","Type","isArrayFilled","flatMap","getType","getChildren","setScheme","onUnknown","getScheme","getTagScheme","getName","prepareCase","currentCase","getOutputTagCase","toUpperCase","toLowerCase","isString","getDisplayedName","mounted","hasParent","onNodeDidMount","getParent","type","Boolean","remove","removeChild","isArray","appendChild","getLastChild","at","getLastChildOfType","reverse","find","getLastChildOfName","getFirstChild","getFirstChildOfType","getFirstChildOfName","getPreviewsSibling","parentChildren","currentIndex","indexOf","getPreviewsSiblings","filter","child","index","getNextSibling","length","getNextSiblings","getChildrenCount","hasChildren","adjustChildren","setDelayedChildren","addDelayedChildren","getDelayedChildren","hasDelayedChildren","flattenedChildren","forEach","push","prependChild","unshift","insertBefore","nodes","currentNodeIndex","deleteCount","splice","insertAfter","startIndex","propagateChild","includes","reduce","acc","replaceChild","targetNode","map","replace","clone","deep","createNode","toPlainText","join","getPlainTextLength","removePreviewsSiblings","previewsSiblings","sibling","removeNextSiblings","nextSiblings","findByTextIndex","endIndex","flattenAst","getLength","split","offset","byWord","plainTextLength","leftTree","tree","leftNode","rightNode","rightTree","ast","flat","traverse","toJSON","inlineSymbol","voidSymbol","BBCodeElementNode","attributes","tagScheme","isInline","isVoid","setValue","setAttributes","isAllowedTag","filterChildren","filteredChildren","resolved","unresolved","allowedChildren","getAllowedChildren","convertChildren","childConverter","getChildConverter","isNumber","isBoolean","getValue","isPlainObject","entries","key","fromEntries","setAttribute","isStringFilled","preparedName","isNil","getAttribute","getAttributes","convertedChildren","isAllowedUnresolvedNodesHoisting","toStringValue","toStringAttributes","attrValue","preparedKey","getContent","toString","getOpeningTag","displayedName","tagValue","formattedAttributes","getClosingTag","createElement","void","inline","splitByChildIndex","TypeError","childrenCount","leftChildren","childIndex","rightChildren","stringifier","getStringifier","isFunction","openingTag","content","closingTag","BBCodeRootNode","createRoot","BBCodeFragmentNode","createFragment","contentSymbol","BBCodeTextNode","nodeOptions","setContent","isTextNodeContent","decodeSpecialChars","replaceAll","String","createText","sourceOffset","contentLength","lastIndex","lastIndexOf","slice","BBCodeNewLineNode","createNewLine","BBCodeTabNode","createTab","BBCodeNodeScheme","converter","serializer","setConverter","convert","setStringifier","stringify","setSerializer","serialize","removeName","names","isNull","getConverter","getSerializer","BBCodeTagScheme","setInline","setVoid","setChildConverter","convertChild","setAllowedChildren","defaultBlockStringifier","isAllowNewlineBeforeOpeningTag","previewsSibling","isAllowNewlineAfterOpeningTag","firstChild","isAllowNewlineBeforeClosingTag","lastChild","isAllowNewlineAfterClosingTag","nextSibling","BBCodeScheme","isNodeScheme","tagSchemes","outputTagCase","Case","LOWER","unresolvedNodesHoisting","setTagSchemes","setOutputTagCase","setUnresolvedNodesHoisting","invalidSchemeIndex","findIndex","setTagScheme","newTagSchemesNames","currentTagSchemes","getTagSchemes","filteredCurrentTagSchemes","tagName","tagCase","allowedCases","values","getAllowedTags","allowedTags","preparedOptions","UPPER","BBCodeTextScheme","BBCodeNewLineScheme","BBCodeTabScheme","DefaultBBCodeScheme","trim"],"mappings":"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"}